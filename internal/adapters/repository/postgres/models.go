// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type ItemStatus string

const (
	ItemStatusPENDING  ItemStatus = "PENDING"
	ItemStatusCOMPLETE ItemStatus = "COMPLETE"
	ItemStatusFAILED   ItemStatus = "FAILED"
)

func (e *ItemStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ItemStatus(s)
	case string:
		*e = ItemStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ItemStatus: %T", src)
	}
	return nil
}

type NullItemStatus struct {
	ItemStatus ItemStatus `json:"item_status"`
	Valid      bool       `json:"valid"` // Valid is true if ItemStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullItemStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ItemStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ItemStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullItemStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ItemStatus), nil
}

type Item struct {
	ID            int32          `json:"id"`
	Name          string         `json:"name"`
	Quantity      int32          `json:"quantity"`
	ReservationID sql.NullString `json:"reservation_id"`
	Status        ItemStatus     `json:"status"`
	CreatedAt     time.Time      `json:"created_at"`
	UpdatedAt     time.Time      `json:"updated_at"`
}
