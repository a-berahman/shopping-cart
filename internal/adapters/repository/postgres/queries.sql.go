// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const createItem = `-- name: CreateItem :one
INSERT INTO items (
    name, 
    quantity, 
    status
) VALUES (
    $1, $2, $3
) RETURNING id, name, quantity, reservation_id, status, created_at, updated_at
`

type CreateItemParams struct {
	Name     string     `json:"name"`
	Quantity int32      `json:"quantity"`
	Status   ItemStatus `json:"status"`
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, createItem, arg.Name, arg.Quantity, arg.Status)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Quantity,
		&i.ReservationID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getItem = `-- name: GetItem :one
SELECT id, name, quantity, reservation_id, status, created_at, updated_at FROM items 
WHERE id = $1
`

func (q *Queries) GetItem(ctx context.Context, id int32) (Item, error) {
	row := q.db.QueryRowContext(ctx, getItem, id)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Quantity,
		&i.ReservationID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listItems = `-- name: ListItems :many
SELECT id, name, quantity, reservation_id, status, created_at, updated_at FROM items 
ORDER BY created_at DESC
`

func (q *Queries) ListItems(ctx context.Context) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, listItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Quantity,
			&i.ReservationID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateItemReservation = `-- name: UpdateItemReservation :one
UPDATE items 
SET reservation_id = $2,
    status = $3,
    updated_at = NOW()
WHERE id = $1
RETURNING id, name, quantity, reservation_id, status, created_at, updated_at
`

type UpdateItemReservationParams struct {
	ID            int32          `json:"id"`
	ReservationID sql.NullString `json:"reservation_id"`
	Status        ItemStatus     `json:"status"`
}

func (q *Queries) UpdateItemReservation(ctx context.Context, arg UpdateItemReservationParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, updateItemReservation, arg.ID, arg.ReservationID, arg.Status)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Quantity,
		&i.ReservationID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateItemStatus = `-- name: UpdateItemStatus :one
UPDATE items 
SET status = $2,
    updated_at = NOW()
WHERE id = $1
RETURNING id, name, quantity, reservation_id, status, created_at, updated_at
`

type UpdateItemStatusParams struct {
	ID     int32      `json:"id"`
	Status ItemStatus `json:"status"`
}

func (q *Queries) UpdateItemStatus(ctx context.Context, arg UpdateItemStatusParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, updateItemStatus, arg.ID, arg.Status)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Quantity,
		&i.ReservationID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
